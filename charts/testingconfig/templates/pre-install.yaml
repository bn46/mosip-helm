apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-2"
spec:
  template:
    metadata:
      name: "{{.Release.Name}}"
      namespace: {{ .Release.Namespace }}
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      serviceAccountName: testingconfig
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: bitnami/kubectl:1.22.9
        command:
        - /bin/bash
        - -c
        - |
            #!/bin/bash
            # Copy configmaps and secrets from other namespaces

            # Function to copy ConfigMaps or Secrets
            function copy_resource() {
              local RESOURCE_TYPE="$1"
              local RESOURCE_NAME="$2"
              local SOURCE_NAMESPACE="$3"
              local DESTINATION_NAMESPACE="$4"
              local NEW_NAME="${5:-$RESOURCE_NAME}" 

              if [ "$RESOURCE_TYPE" = "configmap" ]; then
                RESOURCE="configmap"
              elif [ "$RESOURCE_TYPE" = "secret" ]; then
                RESOURCE="secret"
              else
                echo "Incorrect resource type: $RESOURCE_TYPE. Exiting..."
                exit 1
              fi

              if [ -n "$NEW_NAME" ]; then
                kubectl -n "$DESTINATION_NAMESPACE" delete --ignore-not-found=true "$RESOURCE" "$NEW_NAME"
                kubectl -n "$SOURCE_NAMESPACE" get "$RESOURCE" "$RESOURCE_NAME" -o yaml | \
                  sed "s/namespace: $SOURCE_NAMESPACE/namespace: $DESTINATION_NAMESPACE/g" | \
                  sed "s/name: $RESOURCE_NAME/name: $NEW_NAME/g" | kubectl -n "$DESTINATION_NAMESPACE" create -f -
              else
                kubectl -n "$DESTINATION_NAMESPACE" delete --ignore-not-found=true "$RESOURCE" "$RESOURCE_NAME"
                kubectl -n "$SOURCE_NAMESPACE" get "$RESOURCE" "$RESOURCE_NAME" -o yaml | \
                  sed "s/namespace: $SOURCE_NAMESPACE/namespace: $DESTINATION_NAMESPACE/g" | \
                  kubectl -n "$DESTINATION_NAMESPACE" create -f -
              fi
            }

            # Function to copy multiple ConfigMaps and Secrets
            function copy_resources() {
              # Copy ConfigMaps
              copy_resource "configmap" "global" "default" "{{ .Release.Namespace }}"
              copy_resource "configmap" "keycloak-host" "keycloak" "{{ .Release.Namespace }}"
              copy_resource "configmap" "activemq-activemq-artemis-share" "activemq" "{{ .Release.Namespace }}"
              copy_resource "configmap" "s3" "s3" "{{ .Release.Namespace }}"
              copy_resource "configmap" "msg-gateway" "msg-gateways" "{{ .Release.Namespace }}"

              # Copy Secrets
              copy_resource "secret" "db-common-secrets" "postgres" "{{ .Release.Namespace }}"
              copy_resource "secret" "keycloak" "keycloak" "{{ .Release.Namespace }}"
              copy_resource "secret" "keycloak-client-secrets" "keycloak" "{{ .Release.Namespace }}"
              copy_resource "secret" "activemq-activemq-artemis" "activemq" "{{ .Release.Namespace }}"
              copy_resource "secret" "softhsm-kernel" "softhsm" "{{ .Release.Namespace }}"
              copy_resource "secret" "softhsm-ida" "softhsm" "{{ .Release.Namespace }}"
              copy_resource "secret" "s3" "s3" "{{ .Release.Namespace }}"
              copy_resource "secret" "msg-gateway" "msg-gateways" "{{ .Release.Namespace }}"
              copy_resource "secret" "mosip-captcha" "captcha" "{{ .Release.Namespace }}"
              copy_resource "secret" "conf-secrets-various" "conf-secrets" "{{ .Release.Namespace }}"
            }

            # Error handling settings
            set -e
            set -o errexit
            set -o nounset
            set -o errtrace
            set -o pipefail

            copy_resources