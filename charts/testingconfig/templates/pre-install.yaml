apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}"
      namespace: {{ .Release.Namespace }}
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      serviceAccountName: testingconfig
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: "bitnami/kubectl:1.22.9"
        command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
          # Copy configmaps and secrets from other namespaces
          # DST_NS: Destination namespace

          function copy_resource() {
            RESOURCE_TYPE=$1
            RESOURCE_NAME=$2
            SOURCE_NS=$3
            DEST_NS=$4
            NEW_NAME=$5

            RESOURCE=$RESOURCE_TYPE

            if [ -n "$NEW_NAME" ]; then
              kubectl -n $DEST_NS delete --ignore-not-found=true $RESOURCE $NEW_NAME
              kubectl -n $SOURCE_NS get $RESOURCE $RESOURCE_NAME -o yaml | \
                sed "s/namespace: $SOURCE_NS/namespace: $DEST_NS/g" | \
                sed "s/name: $RESOURCE_NAME/name: $NEW_NAME/g" | \
                kubectl -n $DEST_NS create -f -
            else
              kubectl -n $DEST_NS delete --ignore-not-found=true $RESOURCE $RESOURCE_NAME
              kubectl -n $SOURCE_NS get $RESOURCE $RESOURCE_NAME -o yaml | \
                sed "s/namespace: $SOURCE_NS/namespace: $DEST_NS/g" | \
                kubectl -n $DEST_NS create -f -
            fi
          }

          function copying_resources() {
            DST_NS=onboarder

            copy_resource configmap global default $DST_NS
            copy_resource configmap keycloak-env-vars keycloak $DST_NS
            copy_resource configmap keycloak-host keycloak $DST_NS

            copy_resource secret s3 s3 $DST_NS
            copy_resource secret keycloak keycloak $DST_NS
            copy_resource secret keycloak-client-secrets keycloak $DST_NS

            return 0
          }
