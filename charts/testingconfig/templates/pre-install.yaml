apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}"
      namespace: {{ .Release.Namespace }}
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      serviceAccountName: testingconfig
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: "bitnami/kubectl:1.22.9"
        command:
        - /bin/bash
        - -c
        - |
          # ConfigMaps mapping
          for mapping in "default global" "activemq activemq-activemq-artemis-share" "s3 s3" "msg-gateways msg-gateways" "keycloak keycloak-host"; do
            source_namespace=$(echo $mapping | cut -d' ' -f1)
            resource=$(echo $mapping | cut -d' ' -f2)

            if kubectl get configmap $resource -n $source_namespace &> /dev/null; then
              kubectl get configmap $resource -n $source_namespace -o yaml \
                | sed "s/$source_namespace\/$resource/testingconfig\/$resource/" \
                | kubectl apply -f -
            else
              echo "ConfigMap not found for $resource in $source_namespace"
            fi
          done

          # Secrets mapping
          for mapping in "postgres db-common-secrets" "keycloak keycloak" "keycloak keycloak-client-secrets" "activemq activemq-activemq-artemis" "softhsm softhsm-kernel" "softhsm softhsm-ida" "s3 s3" "msg-gateways msg-gateways" "captcha mosip-captcha" "conf-secrets conf-secrets-various"; do
            source_namespace=$(echo $mapping | cut -d' ' -f1)
            resource=$(echo $mapping | cut -d' ' -f2)

            if kubectl get secret $resource -n $source_namespace &> /dev/null; then
              kubectl get secret $resource -n $source_namespace -o yaml \
                | sed "s/$source_namespace\/$resource/testingconfig\/$resource/" \
                | kubectl apply -f -
            else
              echo "Secret not found for $resource in $source_namespace"
            fi
          done
